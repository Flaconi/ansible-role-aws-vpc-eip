---

###
### Asserts
###

- name: ensure name is defined
  assert:
    that:
      - eip.name is defined
    msg: "aws_vpc_eips[x].name is not defined"


###
### Variables
###

- name: ensure variables are reset
  set_fact:
    _aws_vpc_eip_tags: []
    _aws_vpc_eip_filters: []

- name: set eip tags
  set_fact:
    _aws_vpc_eip_tags: "{{ eip.tags | default([]) }} + [{'key': 'Name', 'val': '{{ eip.name }}'}]"

- name: set eip filters
  set_fact:
    _aws_vpc_eip_filters: >-
      {{ _aws_vpc_eip_filters | default([]) }} + [{'key': 'tag:{{ item.key }}', 'val': '{{ item.val }}'}]
  with_items:
    - "{{ _aws_vpc_eip_tags }}"


###
### Check existance
###

- name: gather eip facts by filter
  ec2_eip_facts:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
    region: "{{ eip.region | default(aws_vpc_eip_default_region) }}"
    filters: "{{ _aws_vpc_eip_filters | get_attr('key', 'val') }}"
  register: _aws_vpc_eip_facts


###
### create eip if none exist
###
- name: ensure eip is created if none exists
  ec2_eip:
    # Fixed values
    state: present
    # Optional values
    release_on_disassociation: "{{ eip.release_on_disassociation | default(aws_vpc_eip_release_on_disassociation) }}"
    reuse_existing_ip_allowed: "{{ eip.reuse_existing_ip_allowed | default(aws_vpc_eip_reuse_existing_ip_allowed) }}"
    public_ip: "{{ eip.public_ip | default(omit) }}"
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  register: _aws_vpc_eip
  when:
    - _aws_vpc_eip_facts.addresses | length == 0

- name: ensure eip is tagged
  ec2_tag:
    # Fixed values
    state: present
    # Looked-up values
    resource: "{{ _aws_vpc_eip.allocation_id }}"
    # Required values
    tags: "{{  _aws_vpc_eip_tags | get_attr('key', 'val') }}"
    # Optional values
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('env', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  when:
    - _aws_vpc_eip_facts.addresses | length == 0
    - _aws_vpc_eip is succeeded
